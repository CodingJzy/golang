package main

import (
	"fmt"
)

func main()  {
	fmt.Println("声明接口")

	// 接口是双方规定的一种合作协议。接口实现者不需要关心接口会被怎样使用，调用着不需要关心接口的实现细节。接口是一种类型。也是一种抽象结构。不会暴露所含数据的格式、类型及结构。
	// 接口和其他动态语言的鸭子模型有密切关系。比如说python、javascript。任何类型，只要实现了该接口中的方法集，那么就属于这个类型。
	// 每个接口类型由数个方法组成。
	/*
	接口类型名：
		使用type 将接口定义为自定义的类型名
	方法名：
		当方法名首字母是大写是，且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包之外的代码访问
	参数列表、返回值列表：
		参数列表和返回值列表的参数变量名可以被忽略
	*/

	// 可以闻
	type Smell interface {
		smell()
	}

	// 可以吃
	type Eat interface {
		eat()
	}

	// 开发中常见的接口及写法
	type Writer interface {
		Writer (p []byte) (n int, err error)
	}
	// 这个接口可以调用Writer()方法写入一个字节数组([]byte), 返回值告知写入字节数(n int) 和可能发生的错误(err error)
	// 每个接口中方法数量不会很多，go希望通过一个接口精准的秒速它自己的功能，而通过多个接口嵌入和组合的方式来扩充接口。
}
